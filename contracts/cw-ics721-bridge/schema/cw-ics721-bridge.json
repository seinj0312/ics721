{
  "contract_name": "cw-ics721-bridge",
  "contract_version": "0.0.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "cw721_base_code_id"
    ],
    "properties": {
      "cw721_base_code_id": {
        "description": "Code ID of cw721-ics contract. A new cw721-ics will be instantiated for each new IBCd NFT classID.\n\nNOTE: this _must_ correspond to the cw721-base contract. Using a regular cw721 may cause the ICS 721 interface implemented by this contract to stop working, and IBCd away NFTs to be unreturnable (cw721 does not have a mint method in the spec).",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Receives a NFT to be IBC transfered away. The `msg` field must be a binary encoded `IbcAwayMsg`.",
        "type": "object",
        "required": [
          "receive_nft"
        ],
        "properties": {
          "receive_nft": {
            "$ref": "#/definitions/Cw721ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Mesages used internally by the contract. These may only be called by the contract itself.",
        "type": "object",
        "required": [
          "callback"
        ],
        "properties": {
          "callback": {
            "$ref": "#/definitions/CallbackMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "CallbackMsg": {
        "oneOf": [
          {
            "description": "Mints a NFT of collection class_id for receiver with the provided id and metadata. Only callable by this contract.",
            "type": "object",
            "required": [
              "mint"
            ],
            "properties": {
              "mint": {
                "type": "object",
                "required": [
                  "class_id",
                  "receiver",
                  "token_ids",
                  "token_uris"
                ],
                "properties": {
                  "class_id": {
                    "description": "The class_id to mint for. This must have previously been created with `SaveClass`.",
                    "type": "string"
                  },
                  "receiver": {
                    "description": "The address that ought to receive the NFTs. This is a local address, not a bech32 public key.",
                    "type": "string"
                  },
                  "token_ids": {
                    "description": "Unique identifiers for the tokens.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "token_uris": {
                    "description": "Urls pointing to metadata about the NFTs to mint. For example, this may point to ERC721 metadata on IPFS. Must be the same length as token_ids. token_uris[i] is the metadata for token_ids[i].",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Much like mint, but will instantiate a new cw721 contract iff the classID does not have one yet.",
            "type": "object",
            "required": [
              "do_instantiate_and_mint"
            ],
            "properties": {
              "do_instantiate_and_mint": {
                "type": "object",
                "required": [
                  "class_id",
                  "receiver",
                  "token_ids",
                  "token_uris"
                ],
                "properties": {
                  "class_id": {
                    "description": "The ics721 class ID to mint for.",
                    "type": "string"
                  },
                  "class_uri": {
                    "description": "The URI for this class ID.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "receiver": {
                    "description": "The address that ought to receive the NFT. This is a local address, not a bech32 public key.",
                    "type": "string"
                  },
                  "token_ids": {
                    "description": "Unique identifiers for the tokens being transfered.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "token_uris": {
                    "description": "A list of urls pointing to metadata about the NFTs. For example, this may point to ERC721 metadata on ipfs.\n\nMust be the same length as token_ids.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Transfers a number of NFTs identified by CLASS_ID and TOKEN_IDS to RECEIVER.",
            "type": "object",
            "required": [
              "batch_transfer"
            ],
            "properties": {
              "batch_transfer": {
                "type": "object",
                "required": [
                  "class_id",
                  "receiver",
                  "token_ids"
                ],
                "properties": {
                  "class_id": {
                    "description": "The ics721 class ID of the tokens to be transfered.",
                    "type": "string"
                  },
                  "receiver": {
                    "description": "The address that should receive the tokens.",
                    "type": "string"
                  },
                  "token_ids": {
                    "description": "The tokens (of CLASS_ID) that should be sent.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Handles the falliable part of receiving an IBC packet. Transforms TRANSFERS into a `BatchTransfer` message and NEW_TOKENS into a `DoInstantiateAndMint`, then dispatches those methods.",
            "type": "object",
            "required": [
              "handle_packet_receive"
            ],
            "properties": {
              "handle_packet_receive": {
                "type": "object",
                "required": [
                  "receiver"
                ],
                "properties": {
                  "class_uri": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "new_tokens": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/NewTokenInfo"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "receiver": {
                    "type": "string"
                  },
                  "transfers": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/TransferInfo"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Cw721ReceiveMsg": {
        "description": "Cw721ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "msg",
          "sender",
          "token_id"
        ],
        "properties": {
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NewTokenInfo": {
        "type": "object",
        "required": [
          "class_id",
          "token_ids",
          "token_uris"
        ],
        "properties": {
          "class_id": {
            "type": "string"
          },
          "token_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "TransferInfo": {
        "type": "object",
        "required": [
          "class_id",
          "token_ids"
        ],
        "properties": {
          "class_id": {
            "type": "string"
          },
          "token_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Gets the classID this contract has stored for a given NFT contract. If there is no class ID for the provided contract, returns None.",
        "type": "object",
        "required": [
          "class_id_for_nft_contract"
        ],
        "properties": {
          "class_id_for_nft_contract": {
            "type": "object",
            "required": [
              "contract"
            ],
            "properties": {
              "contract": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets the NFT contract associated wtih the provided class ID. If no such contract exists, returns None. Returns Option<Addr>.",
        "type": "object",
        "required": [
          "nft_contract_for_class_id"
        ],
        "properties": {
          "nft_contract_for_class_id": {
            "type": "object",
            "required": [
              "class_id"
            ],
            "properties": {
              "class_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets the class level metadata URI for the provided class_id. If there is no metadata, returns None. Returns `Option<String>`.",
        "type": "object",
        "required": [
          "metadata"
        ],
        "properties": {
          "metadata": {
            "type": "object",
            "required": [
              "class_id"
            ],
            "properties": {
              "class_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets the owner of the NFT identified by CLASS_ID and TOKEN_ID. Errors if no such NFT exists. Returns `cw721::OwnerOfResonse`.",
        "type": "object",
        "required": [
          "owner"
        ],
        "properties": {
          "owner": {
            "type": "object",
            "required": [
              "class_id",
              "token_id"
            ],
            "properties": {
              "class_id": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "class_id_for_nft_contract": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_String",
      "type": [
        "string",
        "null"
      ]
    },
    "metadata": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_String",
      "type": [
        "string",
        "null"
      ]
    },
    "nft_contract_for_class_id": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_Addr",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "owner": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OwnerOfResponse",
      "type": "object",
      "required": [
        "approvals",
        "owner"
      ],
      "properties": {
        "approvals": {
          "description": "If set this address is approved to transfer/send the token as well",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Approval"
          }
        },
        "owner": {
          "description": "Owner of the token",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "description": "When the Approval expires (maybe Expiration::never)",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "spender": {
              "description": "Account that can transfer/send the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
