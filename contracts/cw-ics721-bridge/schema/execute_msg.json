{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Transfer the NFT identified by class_id and token_id to receiver",
      "type": "object",
      "required": [
        "transfer"
      ],
      "properties": {
        "transfer": {
          "type": "object",
          "required": [
            "class_id",
            "receiver",
            "token_id"
          ],
          "properties": {
            "class_id": {
              "type": "string"
            },
            "receiver": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Burn the NFT identified by class_id and token_id",
      "type": "object",
      "required": [
        "burn"
      ],
      "properties": {
        "burn": {
          "type": "object",
          "required": [
            "class_id",
            "token_id"
          ],
          "properties": {
            "class_id": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Mints a NFT of collection class_id for receiver with the provided id and metadata. Only callable by this contract.",
      "type": "object",
      "required": [
        "mint"
      ],
      "properties": {
        "mint": {
          "type": "object",
          "required": [
            "class_id",
            "receiver",
            "token_ids",
            "token_uris"
          ],
          "properties": {
            "class_id": {
              "description": "The class_id to mint for. This must have previously been created with `SaveClass`.",
              "type": "string"
            },
            "receiver": {
              "description": "The address that ought to receive the NFTs. This is a local address, not a bech32 public key.",
              "type": "string"
            },
            "token_ids": {
              "description": "Unique identifiers for the tokens.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "token_uris": {
              "description": "Urls pointing to metadata about the NFTs to mint. For example, this may point to ERC721 metadata on IPFS. Must be the same length as token_ids. token_uris[i] is the metadata for token_ids[i].",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Much like mint, but will instantiate a new cw721 contract iff the classID does not have one yet. Needed because we can only dispatch one submessage at a time from `ibc_packet_receive` and properly handle IBC error handling. Only callable by this contract.",
      "type": "object",
      "required": [
        "do_instantiate_and_mint"
      ],
      "properties": {
        "do_instantiate_and_mint": {
          "type": "object",
          "required": [
            "class_id",
            "receiver",
            "token_ids",
            "token_uris"
          ],
          "properties": {
            "class_id": {
              "description": "The class_id to mint for. This must have previously been created with `SaveClass`.",
              "type": "string"
            },
            "class_uri": {
              "description": "The URI for this class ID.",
              "type": [
                "string",
                "null"
              ]
            },
            "receiver": {
              "description": "The address that ought to receive the NFT. This is a local address, not a bech32 public key.",
              "type": "string"
            },
            "token_ids": {
              "description": "Unique identifiers for the tokens being transfered.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "token_uris": {
              "description": "A list of urls pointing to metadata about the NFTs. For example, this may point to ERC721 metadata on ipfs.\n\nMust be the same length as token_ids.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Receives a NFT to be IBC transfered away. The `msg` field must be a binary encoded `IbcAwayMsg`.",
      "type": "object",
      "required": [
        "receive_nft"
      ],
      "properties": {
        "receive_nft": {
          "$ref": "#/definitions/Cw721ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Transfers a group of NFTs from the escrow for a the given channel. Callable only by the contract.",
      "type": "object",
      "required": [
        "batch_transfer_from_channel"
      ],
      "properties": {
        "batch_transfer_from_channel": {
          "type": "object",
          "required": [
            "channel",
            "class_id",
            "receiver",
            "token_ids"
          ],
          "properties": {
            "channel": {
              "type": "string"
            },
            "class_id": {
              "type": "string"
            },
            "receiver": {
              "type": "string"
            },
            "token_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Burns the specified tokens that are inside the escrow for the specified channel. Only callable by this contract.",
      "type": "object",
      "required": [
        "burn_escrow_tokens"
      ],
      "properties": {
        "burn_escrow_tokens": {
          "type": "object",
          "required": [
            "channel",
            "class_id",
            "token_ids"
          ],
          "properties": {
            "channel": {
              "type": "string"
            },
            "class_id": {
              "type": "string"
            },
            "token_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw721ReceiveMsg": {
      "description": "Cw721ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "msg",
        "sender",
        "token_id"
      ],
      "properties": {
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        }
      }
    }
  }
}
